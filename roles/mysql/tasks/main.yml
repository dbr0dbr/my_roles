- name: installing python mysql libraries
  yum: name=MySQL-python
  environment: "{{ proxy_env }}"

- name: Install mysql repo.
  yum:
     name: "{{ mysql_repo_url}}"
     state: present
  environment: "{{ proxy_env }}"

- name: Install mysql server.
  yum:
     name: mysql-community-server
  environment: "{{ proxy_env }}"
  register: mysql_installed

- name: Template configuration file for /etc/my.cnf
  template:
    src: my.cnf.j2
    dest: '/etc/my.cnf'
  notify:
    - restart mysqld
  tags: reconfigure

- name: Open ports for mysql
  firewalld:
    port: "3306/tcp"
    permanent: yes
    state: enabled
    immediate: yes

- name: enable and start mysqld
  systemd:
    name: mysqld
    state: started
    enabled: yes

- name: get mysql temp password
  shell: "grep 'temporary password' /var/log/mysqld.log |awk -F 'root@localhost: ' '{print $2}'"
  register: temp_pass
  when: mysql_installed.changed

- name: Set discovered Ansible Python interpreter.
  set_fact:
    ansible_python_interpreter: "{{ ansible_facts.python.executable }}"
  when: ansible_python_interpreter is not defined

- name: Template configuration file for /root/.my.cnf
  template:
    src: .my.cnf.j2
    dest: '/root/.my.cnf'
  vars: 
    mysql_root_password: "{{ temp_pass.stdout }}"
  when: mysql_installed.changed

- name: Set root password
  shell: mysql  --connect-expired-password -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '{{ mysql_root_password }}';"
  when: mysql_installed.changed

- name: Template configuration file for /root/.my.cnf
  template:
    src: .my.cnf.j2
    dest: '/root/.my.cnf'

- name: Create a new database with name '{{ db_name }}'
  mysql_db:
    name: zabbix
    state: present
    encoding: utf8

- name: Create mysql user
  mysql_user:
    name: zabbix
    password: '{{ zabbix_mysql_pass }}'
    priv: 'zabbix.*:ALL'
    state: present

- name: Copy database dump file
  copy:
    src: '{{ dump }}'
    dest: /tmp/dump.sql
  when: dump is defined

- name: Restore database
  mysql_db:
    name: '{{ db_name }}'
    state: import
    target: /tmp/dump.sql
  when: dump is defined